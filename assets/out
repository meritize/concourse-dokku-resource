#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload="$(cat <&0)"

load_pubkey "$payload"
configure_https_tunnel "$payload"
configure_submodule_credentials "$payload"

server=$(jq -r '.source.server // ""' <<< "$payload")
branch=$(jq -r '.source.branch // ""' <<< "$payload")
git_config_payload=$(jq -r '.source.git_config // []' <<< "$payload")
repository=$(jq -r '.params.repository // ""' <<< "$payload")
app=$(jq -r '.params.app // ""' <<< "$payload")
dockerfile_path=$(jq -r '.params.dockerfile_path // ""' <<< "$payload")
app_json_path=$(jq -r '.params.app_json_path // ""' <<< "$payload")
override_branch=$(jq -r '.params.branch // ""' <<< "$payload")
override_builder=$(jq -r '.params.builder // ""' <<< "$payload")
tls_key=$(jq -r '.params.tls.key // ""' <<< "$payload")
tls_cert=$(jq -r '.params.tls.cert // ""' <<< "$payload")
app_domains=$(jq -r '.params.domains // ""' <<< "$payload")
environment=$(jq '.params.environment_variables // {}' <<< "$payload")

builder=$override_builder

configure_git_global "${git_config_payload}"

if [ -z "$server" ]; then
  echo "invalid payload (missing server)"
  exit 1
fi

if [ -z "$app" ]; then
  echo "invalid payload (missing app)"
  exit 1
fi

uri="ssh://dokku@$server/$app"
server_host=$(echo "$server:" | cut -d ':' -f1)
server_port=$(echo "$server:" | cut -d ':' -f2)
server_port=${server_port:-22}

mockcommand() {
  echo "$@" >> $TMPDIR/extcommand.log
}

if [ "$TEST_MOCK_EXT" = "1" ]
then
  EXTCMD="mockcommand"
else
  EXTCMD=""
fi

dokku_cmd() {
  local -r port=${server_port-22}
  $EXTCMD ssh "dokku@$server_host" -p "$port" "$@"
}

if [ -z "$branch" ] && [ -z "$override_branch" ]; then
  echo "invalid payload (missing branch)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

if [ -n "$override_branch" ]; then
  echo "Override $branch with $override_branch"
  branch=$override_branch
fi

cd "$source"
cd "$repository" # these are separate commands is because the tests use an absolute path for repository

if ! dokku_cmd apps:exists "$app"
then
  echo "App $app does not exist, creating it"
  dokku_cmd apps:create "$app"
fi

if [ -n "$builder" ]; then
  echo "Using builder $builder"
  dokku_cmd builder:set "$app" selected "$builder"
fi

echo "Setting app configuration.  Hiding output to protect any secrets."
dokku_cmd config:clear --no-restart "$app"
dokku_cmd config:set --encoded --no-restart "$app" $(jq -r 'to_entries[] | [.key + "=" + (.value | @base64)] | @sh' <<< "$environment") > /dev/null

if [ -n "$app_domains" ];
then
  echo "Setting up App Domains"
  if <<< "$app_domains" jq -cr '.[]' | grep -q '[^-.a-zA-Z]'; then
      echo "ERROR! Invalid characters in domain name"
      exit 1
  fi

  echo $(<<< "$app_domains" jq -r '. | join(" ")')
  dokku_cmd domains:set "$app" $(<<< "$app_domains" jq -r '. | join(" ")')
fi

if [ -n "$dockerfile_path" ]
then
  dokku_cmd builder-dockerfile:set "$app" dockerfile-path "$dockerfile_path"
fi
if [ -n "$app_json_path" ]
then
  dokku_cmd app-json:set "$app" appjson-path "$app_json_path"
fi

deployed_commit=$($EXTCMD git ls-remote "$uri" refs/heads/$branch | awk '{print $1}')
local_head=$(git rev-parse HEAD)

echo "Currently deployed commit is $deployed_commit"
echo "Local HEAD is $local_head"

# if the ref is the same, dokku won't rebuild.
if [ "$deployed_commit" != "$local_head" ]; then
  echo "Pushing $branch to refs/heads/master on $uri"
  $EXTCMD git push --force "$uri" HEAD:refs/heads/$branch
else
  echo "Dokku remote is up to date.  Forcing a rebuild of app instead of pushing."
  dokku_cmd ps:rebuild "$app"
fi

if [ -n "$tls_cert" ]
then
  echo "Setting up TLS certificates using provided certificate and key."
  tempdir=$(mktemp -d)
  certfile=$tempdir/tls.crt
  keyfile=$tempdir/tls.key
  printf "%s\n" "$tls_cert" > "$certfile"
  printf "%s\n" "$tls_key" > "$keyfile"
  tar -C "$tempdir" -c "tls.crt" "tls.key" | dokku_cmd certs:add "$app"
fi

version_ref="$(git rev-parse HEAD | jq -R .)"

if [ -n "$override_branch" ]; then
  jq -n "{
    version: {branch: $(echo $override_branch | jq -R .), ref: $version_ref},
    metadata: $(git_metadata)
  }" >&3
else
  jq -n "{
    version: {ref: $version_ref},
    metadata: $(git_metadata)
  }" >&3
fi
